{"version":3,"sources":["ng://angular-rave/lib/angular-rave.component.ts","ng://angular-rave/lib/angular-rave.directive.ts","ng://angular-rave/lib/rave-options.ts","ng://angular-rave/lib/angular-rave.module.ts"],"names":["AngularRaveComponent","EventEmitter","prototype","pay","window","getpaidSetup","console","error","this","raveOptions","Object","keys","length","validateOptions","validateInput","insertRaveOptions","_raveOptions","_this","amount","payment_plan","PBFPubKey","payment_method","redirect_url","integrity_hash","pay_button_text","country","currency","custom_description","customer_email","custom_logo","custom_title","customer_firstname","customer_lastname","txref","customer_phone","onclose","emit","callback","res","observers","ngOnInit","Component","args","selector","template","Input","Output","AngularRaveDirective","buttonClick","Directive","HostListener","RaveOptions","_RaveOptions","AngularRaveModule","NgModule","imports","exports","declarations","providers"],"mappings":"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","sourcesContent":["import { Component, OnInit, EventEmitter, Input, Output } from '@angular/core';\nimport { _RaveOptions } from \"./rave-options\";\n\ninterface myWindow extends Window {\n  getpaidSetup: (raveOptions: Partial<_RaveOptions>) => void\n}\n\ndeclare var window: myWindow\n\n@Component({\n  selector: 'angular-rave',\n  template: `<ng-content></ng-content>`\n})\n\nexport class AngularRaveComponent implements OnInit {\n  @Input() PBFPubKey: string;\n  @Input() integrity_hash: string;\n  @Input() txref: string;\n  @Input() payment_method: string;\n  @Input() amount: number;\n  @Input() payment_plan: number;\n  @Input() currency: string;\n  @Input() country: string;\n  @Input() customer_email: string;\n  @Input() customer_phone: string;\n  @Input() customer_firstname: string;\n  @Input() customer_lastname: string;\n  @Input() pay_button_text: string;\n  @Input() custom_title: string;\n  @Input() custom_description: string;\n  @Input() redirect_url: string;\n  @Input() custom_logo: string;\n  @Input() meta: any;\n  @Input() raveOptions: Partial<_RaveOptions>\n  @Output() onclose: EventEmitter<void> = new EventEmitter<void>();\n  @Output() callback: EventEmitter<Object> = new EventEmitter<Object>();\n  private _raveOptions: Partial<_RaveOptions>\n\n  constructor() { }\n\n  pay() {\n    if (typeof window.getpaidSetup !== \"function\") {\n      return console.error(\"ANGULAR-RAVE: Please verify that you imported rave's script into your index.html\")\n    }\n    // If the raveoptions Input is present then use it\n    if (this.raveOptions && Object.keys(this.raveOptions).length > 3) {\n      this.validateOptions() && window.getpaidSetup(this.raveOptions)\n    } else {\n      if (this.validateInput()) {\n        this.insertRaveOptions()\n        window.getpaidSetup(this._raveOptions)\n      }\n    }\n  }\n\n  insertRaveOptions() {\n    this.amount ? this._raveOptions.amount = this.amount : null\n    this.payment_plan ? this._raveOptions.payment_plan = this.payment_plan : null\n    this.PBFPubKey ? this._raveOptions.PBFPubKey = this.PBFPubKey : null\n    this.payment_method ? this._raveOptions.payment_method = this.payment_method : null\n    this.redirect_url ? this._raveOptions.redirect_url = this.redirect_url : null\n    this.integrity_hash ? this._raveOptions.integrity_hash = this.integrity_hash : null\n    this.pay_button_text ? this._raveOptions.pay_button_text = this.pay_button_text : null\n    this.country ? this._raveOptions.country = this.country : null\n    this.currency ? this._raveOptions.currency = this.currency : null\n    this.custom_description ? this._raveOptions.custom_description = this.custom_description : null\n    this.customer_email ? this._raveOptions.customer_email = this.customer_email : null\n    this.custom_logo ? this._raveOptions.custom_logo = this.custom_logo : null\n    this.custom_title ? this._raveOptions.custom_title = this.custom_title : null\n    this.customer_firstname ? this._raveOptions.customer_firstname = this.customer_firstname : null\n    this.customer_lastname ? this._raveOptions.customer_lastname = this.customer_lastname : null\n    this.txref ? this._raveOptions.txref = this.txref : null\n    this.customer_phone ? this._raveOptions.customer_phone = this.customer_phone : null\n    this.onclose ? this._raveOptions.onclose = () => this.onclose.emit() : null\n    this.callback ? this._raveOptions.callback = (res) => this.onclose.emit(res) : null\n  }\n\n  validateOptions() {\n    if (!this.raveOptions.PBFPubKey) return console.error(\"ANGULAR-RAVE: Merchant public key is required\");\n    if (!(this.raveOptions.customer_email || this.raveOptions.customer_phone)) return console.error(\"ANGULAR-RAVE: Customer email or phone number is required\");\n    if (!this.raveOptions.txref) return console.error(\"ANGULAR-RAVE: A unique transaction reference is required\")\n    if (!this.raveOptions.amount) return console.error(\"ANGULAR-RAVE: Amount to charge is required\")\n    if (!this.callback.observers.length) return console.error(\"ANGULAR-RAVE: You should attach to callback to verify your transaction\")\n    if (this.onclose.observers.length) this.raveOptions.onclose = () => this.onclose.emit()\n    this.raveOptions.callback = res => this.callback.emit(res)\n    return true\n  }\n\n  validateInput() {\n    if (!this.PBFPubKey) return console.error(\"ANGULAR-RAVE: Merchant public key is required\");\n    if (!(this.customer_email || this.customer_phone)) return console.error(\"ANGULAR-RAVE: Customer email or phone number is required\");\n    if (!this.txref) return console.error(\"ANGULAR-RAVE: A unique transaction reference is required\")\n    if (!this.amount) return console.error(\"ANGULAR-RAVE: Amount to charge is required\")\n    if (!this.callback) return console.error(\"ANGULAR-RAVE: You should attach to callback to verify your transaction\")\n    return true\n  }\n\n  ngOnInit() {\n    this.pay()\n  }\n}","import { Directive, Input, Output, HostListener, EventEmitter } from \"@angular/core\";\n\nimport { _RaveOptions } from \"./rave-options\";\n\ninterface MyWindow extends Window {\n  getpaidSetup: (raveOptions: Partial<_RaveOptions>) => void\n}\n\ndeclare var window: MyWindow\n\n@Directive({\n  selector: '[angular-rave]'\n})\nexport class AngularRaveDirective {\n  @Input() PBFPubKey: string;\n  @Input() integrity_hash: string;\n  @Input() txref: string;\n  @Input() payment_method: string;\n  @Input() amount: number;\n  @Input() payment_plan: number;\n  @Input() currency: string;\n  @Input() country: string;\n  @Input() customer_email: string;\n  @Input() customer_phone: string;\n  @Input() customer_firstname: string;\n  @Input() customer_lastname: string;\n  @Input() pay_button_text: string;\n  @Input() custom_title: string;\n  @Input() custom_description: string;\n  @Input() redirect_url: string;\n  @Input() custom_logo: string;\n  @Input() meta: any;\n  @Input() raveOptions: Partial<_RaveOptions> = {}\n  @Output() onclose: EventEmitter<void> = new EventEmitter<void>();\n  @Output() callback: EventEmitter<any> = new EventEmitter<any>();\n  private _raveOptions: Partial<_RaveOptions> = {}\n\n  constructor() { }\n\n  @HostListener('click')\n  buttonClick() {\n    this.pay()\n  }\n\n  pay() {\n    if (typeof window.getpaidSetup !== \"function\") {\n      return console.error(\"ANGULAR-RAVE: Please verify that you imported rave's script into your index.html\")\n    }\n    // If the raveoptions Input is present then use\n    if (this.raveOptions && Object.keys(this.raveOptions).length > 3) {\n      this.validateOptions() && window.getpaidSetup(this.raveOptions)\n    } else {\n      if (this.validateInput()) {\n        this.insertRaveOptions()\n        window.getpaidSetup(this._raveOptions)\n      }\n    }\n  }\n\n  insertRaveOptions() {\n    this.amount ? this._raveOptions.amount = this.amount : null\n    this.payment_plan ? this._raveOptions.payment_plan = this.payment_plan : null\n    this.PBFPubKey ? this._raveOptions.PBFPubKey = this.PBFPubKey : null\n    this.payment_method ? this._raveOptions.payment_method = this.payment_method : null\n    this.redirect_url ? this._raveOptions.redirect_url = this.redirect_url : null\n    this.integrity_hash ? this._raveOptions.integrity_hash = this.integrity_hash : null\n    this.pay_button_text ? this._raveOptions.pay_button_text = this.pay_button_text : null\n    this.country ? this._raveOptions.country = this.country : null\n    this.currency ? this._raveOptions.currency = this.currency : null\n    this.custom_description ? this._raveOptions.custom_description = this.custom_description : null\n    this.customer_email ? this._raveOptions.customer_email = this.customer_email : null\n    this.custom_logo ? this._raveOptions.custom_logo = this.custom_logo : null\n    this.custom_title ? this._raveOptions.custom_title = this.custom_title : null\n    this.customer_firstname ? this._raveOptions.customer_firstname = this.customer_firstname : null\n    this.customer_lastname ? this._raveOptions.customer_lastname = this.customer_lastname : null\n    this.customer_phone ? this._raveOptions.customer_phone = this.customer_phone : null\n    this.txref ? this._raveOptions.txref = this.txref : null\n    this.onclose ? this._raveOptions.onclose = () => {\n      this.onclose.emit()\n    } : null\n    this.callback ? this._raveOptions.callback = res => {\n      this.callback.emit(res) \n    } : null\n  }\n\n  validateOptions() {\n    if (!this.raveOptions.PBFPubKey) return console.error(\"ANGULAR-RAVE: Merchant public key is required\");\n    if (!(this.raveOptions.customer_email || this.raveOptions.customer_phone)) return console.error(\"ANGULAR-RAVE: Customer email or phone number is required\");\n    if (!this.raveOptions.txref) return console.error(\"ANGULAR-RAVE: A unique transaction reference is required\")\n    if (!this.raveOptions.amount) return console.error(\"ANGULAR-RAVE: Amount to charge is required\")\n    if (!this.callback.observers.length) return console.error(\"ANGULAR-RAVE: You should attach to callback to verify your transaction\")\n    if (this.onclose.observers.length) this.raveOptions.onclose = () => this.onclose.emit()\n    this.raveOptions.callback = res => this.callback.emit(res)\n    return true\n  }\n\n  validateInput() {\n    if (!this.PBFPubKey) return console.error(\"ANGULAR-RAVE: Merchant public key is required\");\n    if (!(this.customer_email || this.customer_phone)) return console.error(\"ANGULAR-RAVE: Customer email or phone number is required\");\n    if (!this.txref) return console.error(\"ANGULAR-RAVE: A unique transaction reference is required\")\n    if (!this.amount) return console.error(\"ANGULAR-RAVE: Amount to charge is required\")\n    if (!this.callback) return console.error(\"ANGULAR-RAVE: You should attach to callback to verify your transaction\")\n    return true\n  }\n\n}","export class RaveOptions {\n  /**\n   * Your merchant public key provided when you create a button\n   */\n  PBFPubKey: string\n  /**\n   * Email of the customer\n   */\n  customer_email?: string\n  /**\n   * Firstname of the customer\n   */\n  customer_firstname?: string\n  /**\n   * firstname of the customer\n   */\n  customer_lastname?: string\n\n  payment_plan?: number\n  /**\n   * Text to be displayed as a short modal description\n   */\n  custom_description?: string\n  /**\n   * Link to your custom image\n   */\n  custom_logo?: string\n  /**\n   * Text to be displayed as the title of the payment modal\n   */\n  custom_title?: string\n  /**\n   * Amount to charge\n   */\n  amount: number\n  /**\n   * phone number of the customer\n   */\n  customer_phone?: string\n  /**\n   * URL to redirect to when transaction is completed.\n   */\n  redirect_url?: string\n  /**\n   * route country. Default NG\n   */\n  country?: string\n  /**\n   * currency to charge the card in. Default \"NGN\"\n   */\n  currency?: string\n  /**\n   * This allows you select the payment option you want for your users, possible values are card, account or both\n   */\n  payment_method?: string\n  /**\n   * Text to be displayed on the Rave Checkout Button\n   */\n  pay_button_text?: string\n  /**\n   * Unique transaction reference provided by the merchant\n   */\n  txref: string\n  /**\n   * This is a sha256 hash of your getpaidSetup values, it is used for passing secured values to the payment gateway\n   */\n  integrity_hash?: string\n  /**\n   * The value to be passed for this is 1. This is useful when customer is using an opera browser, it would load the payment modal on a new page.\n   */\n  hosted_payment?: 1\n  /**\n   * Any other custom data you wish to pass.\n   */\n  meta?: any\n}\n\nexport class _RaveOptions {\n  /**\n   * Your merchant public key provided when you create a button\n   */\n  PBFPubKey: string\n  /**\n   * Email of the customer\n   */\n  customer_email?: string\n  /**\n   * Firstname of the customer\n   */\n  customer_firstname?: string\n  /**\n   * firstname of the customer\n   */\n  customer_lastname?: string\n  /**\n   * Text to be displayed as a short modal description\n   */\n  custom_description?: string\n  /**\n   * Link to your custom image\n   */\n  custom_logo?: string\n  /**\n   * Text to be displayed as the title of the payment modal\n   */\n  custom_title?: string\n  /**\n   * Amount to charge\n   */\n  amount: number\n\n  payment_plan: number\n  /**\n   * phone number of the customer\n   */\n  customer_phone?: string\n  /**\n   * URL to redirect to when transaction is completed.\n   */\n  redirect_url?: string\n  /**\n   * route country. Default NG\n   */\n  country?: string\n  /**\n   * currency to charge the card in. Default \"NGN\"\n   */\n  currency?: string\n  /**\n   * This allows you select the payment option you want for your users, possible values are card, account or both\n   */\n  payment_method?: string\n  /**\n   * Text to be displayed on the Rave Checkout Button\n   */\n  pay_button_text?: string\n  /**\n   * Unique transaction reference provided by the merchant\n   */\n  txref: string\n  /**\n   * This is a sha256 hash of your getpaidSetup values, it is used for passing secured values to the payment gateway\n   */\n  integrity_hash?: string\n  /**\n   * The value to be passed for this is 1. This is useful when customer is using an opera browser, it would load the payment modal on a new page.\n   */\n  hosted_payment?: 1\n  /**\n   * Any other custom data you wish to pass.\n   */\n  meta?: any\n  /**\n   * A function to be called on successful card charge. Userâs can always be redirected to a successful or failed page supplied by the merchant here based on response\n   * @param response?: The server response\n   */\n  callback: (response?: any) => void\n  /**\n   * A function to be called when the pay modal is closed.\n   */\n  onclose: () => void\n}","import { NgModule } from '@angular/core';\n\nimport { AngularRaveComponent } from './angular-rave.component';\nimport { AngularRaveDirective } from \"./angular-rave.directive\";\n\n@NgModule({\n  imports: [],\n  exports: [AngularRaveComponent, AngularRaveDirective],\n  declarations: [AngularRaveComponent, AngularRaveDirective],\n  providers: [],\n})\nexport class AngularRaveModule { }\n"]}