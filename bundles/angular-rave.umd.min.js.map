{"version":3,"sources":["ng://angular-rave/lib/angular-rave.component.ts","ng://angular-rave/lib/angular-rave.directive.ts","ng://angular-rave/lib/rave-options.ts","ng://angular-rave/lib/angular-rave.module.ts"],"names":["AngularRaveComponent","EventEmitter","prototype","pay","this","init","emit","loadScript","_a","sent","window","getpaidSetup","console","error","raveOptions","Object","keys","length","validateOptions","paymentSetup","validateInput","insertRaveOptions","_raveOptions","_this","amount","PBFPubKey","payment_method","redirect_url","integrity_hash","pay_button_text","country","payment_plan","currency","custom_description","customer_email","custom_logo","custom_title","customer_firstname","subaccount","customer_lastname","txref","customer_phone","onclose","callback","res","close","Promise","resolve","script","document","createElement","head","appendChild","onLoadFunc","removeEventListener","addEventListener","setAttribute","observers","ngOnInit","Component","args","selector","template","Input","Output","AngularRaveDirective","buttonClick","Directive","HostListener","RaveOptions","AngularRaveModule","_super","tslib_1.__extends","NgModule","imports","exports","declarations","providers"],"mappings":"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","sourcesContent":["import { Component, OnInit, EventEmitter, Input, Output } from '@angular/core';\r\nimport { PrivateRaveOptions } from './rave-options';\r\n\r\ninterface MyWindow extends Window {\r\n  getpaidSetup: (raveOptions: Partial<PrivateRaveOptions>) => void;\r\n}\r\n\r\ndeclare var window: MyWindow;\r\n\r\n@Component({\r\n  selector: 'angular-rave', // tslint:disable-line\r\n  template: `<ng-content></ng-content>`\r\n})\r\n\r\nexport class AngularRaveComponent implements OnInit {\r\n  @Input() PBFPubKey: string;\r\n  @Input() integrity_hash: string;\r\n  @Input() txref: string;\r\n  @Input() payment_method: string;\r\n  @Input() amount: number;\r\n  @Input() currency: string;\r\n  @Input() country: string;\r\n  @Input() payment_plan: number;\r\n  @Input() customer_email: string;\r\n  @Input() customer_phone: string;\r\n  @Input() customer_firstname: string;\r\n  @Input() customer_lastname: string;\r\n  @Input() subaccount: { id: string, transaction_split_ratio: string }[];\r\n  @Input() pay_button_text: string;\r\n  @Input() custom_title: string;\r\n  @Input() custom_description: string;\r\n  @Input() redirect_url: string;\r\n  @Input() custom_logo: string;\r\n  @Input() meta: any;\r\n  @Input() raveOptions: Partial<PrivateRaveOptions>;\r\n  @Output() onclose: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() callback: EventEmitter<Object> = new EventEmitter<Object>();\r\n  @Output() init: EventEmitter<Object> = new EventEmitter<Object>();\r\n  private _raveOptions: Partial<PrivateRaveOptions> = {};\r\n  private paymentSetup: any;\r\n\r\n  constructor() { }\r\n\r\n  async pay() {\r\n    if (this.init) {\r\n      this.init.emit();\r\n    }\r\n    await this.loadScript();\r\n    if (typeof window.getpaidSetup !== 'function') {\r\n      return console.error('ANGULAR-RAVE: Please verify that you imported rave\\'s script into your index.html');\r\n    }\r\n    // If the raveoptions Input is present then use it\r\n    if (this.raveOptions && Object.keys(this.raveOptions).length > 3) {\r\n      if (this.validateOptions()) {\r\n        this.paymentSetup = window.getpaidSetup(this.raveOptions);\r\n      }\r\n    } else {\r\n      if (this.validateInput()) {\r\n        this.insertRaveOptions();\r\n        this.paymentSetup = window.getpaidSetup(this._raveOptions);\r\n      }\r\n    }\r\n  }\r\n\r\n  insertRaveOptions() {\r\n    if (this.amount) { this._raveOptions.amount = this.amount; }\r\n    if (this.PBFPubKey) { this._raveOptions.PBFPubKey = this.PBFPubKey; }\r\n    if (this.payment_method) { this._raveOptions.payment_method = this.payment_method; }\r\n    if (this.redirect_url) { this._raveOptions.redirect_url = this.redirect_url; }\r\n    if (this.integrity_hash) { this._raveOptions.integrity_hash = this.integrity_hash; }\r\n    if (this.pay_button_text) { this._raveOptions.pay_button_text = this.pay_button_text; }\r\n    if (this.country) { this._raveOptions.country = this.country; }\r\n    if (this.payment_plan) { this._raveOptions.payment_plan = this.payment_plan; }\r\n    if (this.currency) { this._raveOptions.currency = this.currency; }\r\n    if (this.custom_description) { this._raveOptions.custom_description = this.custom_description; }\r\n    if (this.customer_email) { this._raveOptions.customer_email = this.customer_email; }\r\n    if (this.custom_logo) { this._raveOptions.custom_logo = this.custom_logo; }\r\n    if (this.custom_title) { this._raveOptions.custom_title = this.custom_title; }\r\n    if (this.customer_firstname) { this._raveOptions.customer_firstname = this.customer_firstname; }\r\n    if (this.subaccount) { this._raveOptions.subaccount = this.subaccount; }\r\n    if (this.customer_lastname) { this._raveOptions.customer_lastname = this.customer_lastname; }\r\n    if (this.txref) { this._raveOptions.txref = this.txref; }\r\n    if (this.customer_phone) { this._raveOptions.customer_phone = this.customer_phone; }\r\n    if (this.onclose) { this._raveOptions.onclose = () => this.onclose.emit(); }\r\n    if (this.init) { this._raveOptions.init = () => this.init.emit(); }\r\n    if (this.callback) {\r\n      this._raveOptions.callback = (res) => {\r\n        this.onclose.emit(res);\r\n        this.paymentSetup.close();\r\n      };\r\n    }\r\n  }\r\n\r\n  loadScript(): Promise<void> {\r\n    return new Promise(resolve => {\r\n      if (typeof window.getpaidSetup === 'function') {\r\n        resolve();\r\n        return;\r\n      }\r\n      const script = window.document.createElement('script');\r\n      window.document.head.appendChild(script);\r\n      const onLoadFunc = () => {\r\n        script.removeEventListener('load', onLoadFunc);\r\n        resolve();\r\n      };\r\n      script.addEventListener('load', onLoadFunc);\r\n      script.setAttribute('src', 'https://ravesandboxapi.flutterwave.com/flwv3-pug/getpaidx/api/flwpbf-inline.js');\r\n    });\r\n  }\r\n\r\n  validateOptions() {\r\n    if (!this.raveOptions.PBFPubKey) { return console.error('ANGULAR-RAVE: Merchant public key is required'); }\r\n    if (!(this.raveOptions.customer_email || this.raveOptions.customer_phone)) {\r\n      return console.error('ANGULAR-RAVE: Customer email or phone number is required');\r\n    }\r\n    if (!this.raveOptions.txref) { return console.error('ANGULAR-RAVE: A unique transaction reference is required'); }\r\n    if (!this.raveOptions.amount) { return console.error('ANGULAR-RAVE: Amount to charge is required'); }\r\n    if (!this.callback.observers.length) { return console.error('ANGULAR-RAVE: You should attach to callback to verify your transaction'); }\r\n    this.raveOptions.callback = res => {\r\n      this.callback.emit(res);\r\n      this.paymentSetup.close();\r\n    };\r\n    return true;\r\n  }\r\n\r\n  validateInput() {\r\n    if (!this.PBFPubKey) { return console.error('ANGULAR-RAVE: Merchant public key is required'); }\r\n    if (!(this.customer_email || this.customer_phone)) { return console.error('ANGULAR-RAVE: Customer email or phone number is required'); }\r\n    if (!this.txref) { return console.error('ANGULAR-RAVE: A unique transaction reference is required'); }\r\n    if (!this.amount) { return console.error('ANGULAR-RAVE: Amount to charge is required'); }\r\n    if (!this.callback) { return console.error('ANGULAR-RAVE: You should attach to callback to verify your transaction'); }\r\n    return true;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.pay();\r\n  }\r\n}\r\n","import { Directive, Input, Output, HostListener, EventEmitter } from '@angular/core';\r\n\r\nimport { PrivateRaveOptions } from './rave-options';\r\n\r\ninterface MyWindow extends Window {\r\n  getpaidSetup: (raveOptions: Partial<PrivateRaveOptions>) => void;\r\n}\r\n\r\ndeclare var window: MyWindow;\r\n\r\n@Directive({\r\n  selector: '[angular-rave]' // tslint:disable-line\r\n})\r\nexport class AngularRaveDirective {\r\n  @Input() PBFPubKey: string;\r\n  @Input() integrity_hash: string;\r\n  @Input() txref: string;\r\n  @Input() payment_method: string;\r\n  @Input() amount: number;\r\n  @Input() currency: string;\r\n  @Input() country: string;\r\n  @Input() payment_plan: number;\r\n  @Input() customer_email: string;\r\n  @Input() customer_phone: string;\r\n  @Input() customer_firstname: string;\r\n  @Input() customer_lastname: string;\r\n  @Input() pay_button_text: string;\r\n  @Input() custom_title: string;\r\n  @Input() subaccount: { id: string, transaction_split_ratio: string }[];\r\n  @Input() custom_description: string;\r\n  @Input() redirect_url: string;\r\n  @Input() custom_logo: string;\r\n  @Input() meta: any;\r\n  @Input() raveOptions: Partial<PrivateRaveOptions> = {};\r\n  @Output() onclose: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() callback: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() init: EventEmitter<Object> = new EventEmitter<Object>();\r\n  private _raveOptions: Partial<PrivateRaveOptions> = {};\r\n  private paymentSetup;\r\n\r\n  constructor() { }\r\n\r\n  @HostListener('click')\r\n  buttonClick() {\r\n    this.pay();\r\n  }\r\n\r\n  async pay() {\r\n    if (this.init) {\r\n      this.init.emit();\r\n    }\r\n    await this.loadScript();\r\n    if (typeof window.getpaidSetup !== 'function') {\r\n      return console.error('ANGULAR-RAVE: Please verify that you imported rave\\'s script into your index.html');\r\n    }\r\n    // If the raveoptions Input is present then use\r\n    if (this.raveOptions && Object.keys(this.raveOptions).length > 3) {\r\n      if (this.validateOptions()) {\r\n        this.paymentSetup = window.getpaidSetup(this.raveOptions);\r\n      }\r\n    } else {\r\n      if (this.validateInput()) {\r\n        this.insertRaveOptions();\r\n        this.paymentSetup = window.getpaidSetup(this._raveOptions);\r\n      }\r\n    }\r\n  }\r\n\r\n  insertRaveOptions() {\r\n    if (this.amount) { this._raveOptions.amount = this.amount; }\r\n    if (this.PBFPubKey) { this._raveOptions.PBFPubKey = this.PBFPubKey; }\r\n    if (this.payment_method) { this._raveOptions.payment_method = this.payment_method; }\r\n    if (this.redirect_url) { this._raveOptions.redirect_url = this.redirect_url; }\r\n    if (this.integrity_hash) { this._raveOptions.integrity_hash = this.integrity_hash; }\r\n    if (this.pay_button_text) { this._raveOptions.pay_button_text = this.pay_button_text; }\r\n    if (this.country) { this._raveOptions.country = this.country; }\r\n    if (this.payment_plan) { this._raveOptions.payment_plan = this.payment_plan; }\r\n    if (this.currency) { this._raveOptions.currency = this.currency; }\r\n    if (this.custom_description) { this._raveOptions.custom_description = this.custom_description; }\r\n    if (this.customer_email) { this._raveOptions.customer_email = this.customer_email; }\r\n    if (this.custom_logo) { this._raveOptions.custom_logo = this.custom_logo; }\r\n    if (this.custom_title) { this._raveOptions.custom_title = this.custom_title; }\r\n    if (this.customer_firstname) { this._raveOptions.customer_firstname = this.customer_firstname; }\r\n    if (this.customer_lastname) { this._raveOptions.customer_lastname = this.customer_lastname; }\r\n    if (this.subaccount) { this._raveOptions.subaccount = this.subaccount; }\r\n    if (this.customer_phone) { this._raveOptions.customer_phone = this.customer_phone; }\r\n    if (this.txref) { this._raveOptions.txref = this.txref; }\r\n    if (this.init) { this._raveOptions.init = () => this.init.emit(); }\r\n    if (this.onclose) { this._raveOptions.onclose = () => this.onclose.emit(); }\r\n    if (this.callback) {\r\n      this._raveOptions.callback = (res) => {\r\n        this.onclose.emit(res);\r\n        this.paymentSetup.close();\r\n      };\r\n    }\r\n  }\r\n\r\n  validateOptions() {\r\n    if (!this.raveOptions.PBFPubKey) { return console.error('ANGULAR-RAVE: Merchant public key is required'); }\r\n    if (!(this.raveOptions.customer_email || this.raveOptions.customer_phone)) {\r\n      return console.error('ANGULAR-RAVE: Customer email or phone number is required');\r\n    }\r\n    if (!this.raveOptions.txref) { return console.error('ANGULAR-RAVE: A unique transaction reference is required'); }\r\n    if (!this.raveOptions.amount) { return console.error('ANGULAR-RAVE: Amount to charge is required'); }\r\n    if (!this.callback.observers.length) { return console.error('ANGULAR-RAVE: You should attach to callback to verify your transaction'); }\r\n    if (this.onclose.observers.length) { this.raveOptions.onclose = () => this.onclose.emit(); }\r\n    this.raveOptions.callback = res => {\r\n      this.callback.emit(res);\r\n      this.paymentSetup.close();\r\n    };\r\n    return true;\r\n  }\r\n\r\n  loadScript(): Promise<void> {\r\n    return new Promise(resolve => {\r\n      if (typeof window.getpaidSetup === 'function') {\r\n        resolve();\r\n        return;\r\n      }\r\n      const script = window.document.createElement('script');\r\n      window.document.head.appendChild(script);\r\n      const onLoadFunc = () => {\r\n        script.removeEventListener('load', onLoadFunc);\r\n        resolve();\r\n      };\r\n      script.addEventListener('load', onLoadFunc);\r\n      script.setAttribute('src', 'https://ravesandboxapi.flutterwave.com/flwv3-pug/getpaidx/api/flwpbf-inline.js');\r\n    });\r\n  }\r\n\r\n  validateInput() {\r\n    if (!this.PBFPubKey) { return console.error('ANGULAR-RAVE: Merchant public key is required'); }\r\n    if (!(this.customer_email || this.customer_phone)) { return console.error('ANGULAR-RAVE: Customer email or phone number is required'); }\r\n    if (!this.txref) { return console.error('ANGULAR-RAVE: A unique transaction reference is required'); }\r\n    if (!this.amount) { return console.error('ANGULAR-RAVE: Amount to charge is required'); }\r\n    if (!this.callback) { return console.error('ANGULAR-RAVE: You should attach to callback to verify your transaction'); }\r\n    return true;\r\n  }\r\n\r\n}\r\n","export class RaveOptions {\r\n  /**\r\n   * Your merchant public key provided when you create a button\r\n   */\r\n  PBFPubKey: string;\r\n  /**\r\n   * Email of the customer\r\n   */\r\n  customer_email?: string;\r\n  /**\r\n   * Firstname of the customer\r\n   */\r\n  customer_firstname?: string;\r\n  /**\r\n   * firstname of the customer\r\n   */\r\n  customer_lastname?: string;\r\n  /**\r\n   * Text to be displayed as a short modal description\r\n   */\r\n  custom_description?: string;\r\n  /**\r\n   * Link to your custom image\r\n   */\r\n  custom_logo?: string;\r\n  /**\r\n   * Text to be displayed as the title of the payment modal\r\n   */\r\n  custom_title?: string;\r\n  /**\r\n   * Amount to charge\r\n   */\r\n  amount: number;\r\n  /**\r\n   * phone number of the customer\r\n   */\r\n  customer_phone?: string;\r\n  /**\r\n   * URL to redirect to when transaction is completed.\r\n   */\r\n  redirect_url?: string;\r\n  /**\r\n   * route country. Default NG\r\n   */\r\n  country?: string;\r\n\r\n  payment_plan?: number;\r\n  /**\r\n   * currency to charge the card in. Default \"NGN\"\r\n   */\r\n  currency?: string;\r\n  /**\r\n   * This allows you select the payment option you want for your users, possible values are card, account or both\r\n   */\r\n  payment_method?: string;\r\n  /**\r\n   * Text to be displayed on the Rave Checkout Button\r\n   */\r\n  pay_button_text?: string;\r\n  /**\r\n   * Unique transaction reference provided by the merchant\r\n   */\r\n  txref: string;\r\n  /**\r\n   * This is a sha256 hash of your getpaidSetup values, it is used for passing secured values to the payment gateway\r\n   */\r\n  integrity_hash?: string;\r\n  /**\r\n   * The value to be passed for this is 1. This is useful when customer is using an opera browser, it\r\n   * would load the payment modal on a new page.\r\n   */\r\n  hosted_payment?: 1;\r\n  /**\r\n   * Any other custom data you wish to pass.\r\n   */\r\n  meta?: any;\r\n  /**\r\n   * Subaccounts to split payment with\r\n   * https://developer.flutterwave.com/v2.0/docs/split-payment\r\n   */\r\n  subaccount?: { id: string, transaction_split_ratio: string }[];\r\n}\r\n\r\nexport class PrivateRaveOptions extends RaveOptions {\r\n  /**\r\n   * A function to be called on successful card charge. Userâs can always be redirected to a successful or\r\n   * failed page supplied by the merchant here based on response\r\n   * @param response?: The server response\r\n   */\r\n  callback: (response?: any) => void;\r\n  /**\r\n   * A function to be called when the pay modal is closed.\r\n   */\r\n  onclose: () => void;\r\n  /**\r\n   * A function to be called when payment is about to begin\r\n   */\r\n  init: () => void;\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { AngularRaveComponent } from './angular-rave.component';\r\nimport { AngularRaveDirective } from './angular-rave.directive';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  exports: [AngularRaveComponent, AngularRaveDirective],\r\n  declarations: [AngularRaveComponent, AngularRaveDirective],\r\n  providers: [],\r\n})\r\nexport class AngularRaveModule { }\r\n"]}